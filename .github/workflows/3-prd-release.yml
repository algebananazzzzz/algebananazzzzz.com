# .github/workflows/prd-deployment.yml
name: Production Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Matches tags like v1.2.3
  workflow_dispatch: {}

jobs:
  build-static-assets:
    name: ⚙️ Build Gatsby Static Assets
    runs-on: ubuntu-latest

    steps:
      - name: 1. 📄 Checkout Repository
        uses: actions/checkout@v4

      - name: 2. ⚙️ Detect Package Manager
        id: detect-pm
        run: |
          if [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
          elif [ -f "package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
          else
            echo "Unable to detect package manager"
            exit 1
          fi

      - name: 3. ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-pm.outputs.manager }}

      - name: 4. ⚙️ Configure GitHub Pages
        id: pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: gatsby

      - name: 5. ⬇️ Restore Gatsby Cache
        uses: actions/cache@v4
        with:
          path: |
            public
            .cache
          key: ${{ runner.os }}-gatsby-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-gatsby-

      - name: 6. 📦 Install Dependencies
        run: ${{ steps.detect-pm.outputs.manager }} ${{ steps.detect-pm.outputs.command }}

      - name: 7. ⚙️ Build with Gatsby
        env:
          PREFIX_PATHS: "true"
        run: ${{ steps.detect-pm.outputs.manager }} run build

      - name: 8. 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ./public

  terraform-deploy:
    name: ⚙️ Deploy AWS Infrastructure (Terraform)
    runs-on: ubuntu-latest

    outputs:
      dest_bucket_name: ${{ steps.export-bucket.outputs.dest_bucket_name }}

    steps:
      - name: 1. 📄 Checkout Repository (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 2. ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: 3. ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: 4. ⚙️ Terraform Init
        working-directory: infra
        run: terraform init -input=false

      - name: 5. ⚙️ Select/Create Terraform Workspace
        working-directory: infra
        run: terraform workspace select -or-create prd-web

      - name: 6. ⚙️ Terraform Plan
        working-directory: infra
        run: terraform plan --var-file=config/prd.tfvars -out=output.tfplan -input=false

      - name: 7. ⚙️ Terraform Apply
        working-directory: infra
        run: terraform apply -input=false --auto-approve output.tfplan

      - name: 8. ⚙️ Export Terraform Output (Bucket Name)
        id: export-bucket
        working-directory: infra
        run: |
          echo "dest_bucket_name=$(terraform output -raw origin_bucket_name)" >> $GITHUB_OUTPUT

  deploy-to-s3:
    name: 🚀 Deploy to S3 Bucket
    runs-on: ubuntu-latest
    needs: [build-static-assets, terraform-deploy]

    steps:
      - name: 1. ⬇️ Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: public

      - name: 2. ⚙️ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: 3. 🚀 Sync Static Assets to S3
        run: aws s3 sync --delete public s3://${{ needs.terraform-deploy.outputs.dest_bucket_name }}
